//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  // Chapter: Develop
  // Short Description: Open a new graphics window that preserves the aspect ratio of the given image. 
  public void dev_open_window_fit_image (HObject ho_Image, HTuple hv_Row, HTuple hv_Column, 
      HTuple hv_WidthLimit, HTuple hv_HeightLimit, out HTuple hv_WindowHandle)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = null, hv_ImageWidth = null, hv_ImageHeight = null;
    HTuple hv_TempWidth = null, hv_TempHeight = null, hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = null;
    // Initialize local and output iconic variables 
    hv_WindowHandle = new HTuple();
    //This procedure opens a new graphics window and adjusts the size
    //such that it fits into the limits specified by WidthLimit
    //and HeightLimit, but also maintains the correct image aspect ratio.
    //
    //If it is impossible to match the minimum and maximum extent requirements
    //at the same time (f.e. if the image is very long but narrow),
    //the maximum value gets a higher priority,
    //
    //Parse input tuple WidthLimit
    if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
    {
      hv_MinWidth = 500;
      hv_MaxWidth = 800;
    }
    else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinWidth = 0;
      hv_MaxWidth = hv_WidthLimit.Clone();
    }
    else
    {
      hv_MinWidth = hv_WidthLimit.TupleSelect(0);
      hv_MaxWidth = hv_WidthLimit.TupleSelect(1);
    }
    //Parse input tuple HeightLimit
    if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
    {
      hv_MinHeight = 400;
      hv_MaxHeight = 600;
    }
    else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinHeight = 0;
      hv_MaxHeight = hv_HeightLimit.Clone();
    }
    else
    {
      hv_MinHeight = hv_HeightLimit.TupleSelect(0);
      hv_MaxHeight = hv_HeightLimit.TupleSelect(1);
    }
    //
    //Test, if window size has to be changed.
    hv_ResizeFactor = 1;
    HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
    //First, expand window to the minimum extents (if necessary).
    if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
        hv_ImageHeight)))) != 0)
    {
      hv_ResizeFactor = (((((hv_MinWidth.TupleReal())/hv_ImageWidth)).TupleConcat(
          (hv_MinHeight.TupleReal())/hv_ImageHeight))).TupleMax();
    }
    hv_TempWidth = hv_ImageWidth*hv_ResizeFactor;
    hv_TempHeight = hv_ImageHeight*hv_ResizeFactor;
    //Then, shrink window to maximum extents (if necessary).
    if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
        hv_TempHeight)))) != 0)
    {
      hv_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal())/hv_TempWidth)).TupleConcat(
          (hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin());
    }
    hv_WindowWidth = hv_ImageWidth*hv_ResizeFactor;
    hv_WindowHeight = hv_ImageHeight*hv_ResizeFactor;
    //Resize window
    //dev_open_window(...);
    HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_ImageHeight-1, hv_ImageWidth-1);

    return;
  }

  // Main procedure 
  private void action()
  {


    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image11117455Cam0, ho_Rectangle;
    HObject ho_Contour=null, ho_RegionLines;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null, hv_WindowHandle = new HTuple();
    HTuple hv_Row = null, hv_Column = null, hv_Phi = null;
    HTuple hv_Length1 = null, hv_Length2 = null, hv_RoiTuple = null;
    HTuple hv_CaliperNum = null, hv_NewL1 = null, hv_NewL2 = null;
    HTuple hv_Sin = null, hv_Cos = null, hv_BaseRow = null;
    HTuple hv_BaseCol = null, hv_newRow = null, hv_newCol = null;
    HTuple hv_RowFirstList = null, hv_ColFirstList = null;
    HTuple hv_Index = null, hv_MeasureHandle = new HTuple();
    HTuple hv_RowEdge = new HTuple(), hv_ColumnEdge = new HTuple();
    HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
    HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
    HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
    HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image11117455Cam0);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_RegionLines);
    ho_Image11117455Cam0.Dispose();
    HOperatorSet.ReadImage(out ho_Image11117455Cam0, "C:/Users/cn11321/source/Code/image/RawImage/Robot_03.png");
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.MeanImage(ho_Image11117455Cam0, out ExpTmpOutVar_0, 3, 3);
    ho_Image11117455Cam0.Dispose();
    ho_Image11117455Cam0 = ExpTmpOutVar_0;
    }
    HOperatorSet.GetImageSize(ho_Image11117455Cam0, out hv_Width, out hv_Height);
    //dev_close_window(...);
    dev_open_window_fit_image(ho_Image11117455Cam0, 0, 0, -1, -1, out hv_WindowHandle);
    HOperatorSet.DispObj(ho_Image11117455Cam0, hv_ExpDefaultWinHandle);
    HOperatorSet.DrawRectangle2(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
        out hv_Phi, out hv_Length1, out hv_Length2);
    hv_RoiTuple = new HTuple();
    hv_RoiTuple = hv_RoiTuple.TupleConcat(hv_Row);
    hv_RoiTuple = hv_RoiTuple.TupleConcat(hv_Column);
    hv_RoiTuple = hv_RoiTuple.TupleConcat(hv_Phi);
    hv_RoiTuple = hv_RoiTuple.TupleConcat(hv_Length1);
    hv_RoiTuple = hv_RoiTuple.TupleConcat(hv_Length2);
    HOperatorSet.WriteTuple(hv_RoiTuple, "Roi.tup");
    HOperatorSet.ReadTuple("Roi.tup", out hv_RoiTuple);
    hv_Row = hv_RoiTuple.TupleSelect(0);
    hv_Column = hv_RoiTuple.TupleSelect(1);
    hv_Phi = hv_RoiTuple.TupleSelect(2);
    hv_Length1 = hv_RoiTuple.TupleSelect(3);
    hv_Length2 = hv_RoiTuple.TupleSelect(4);
    HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");

    ho_Rectangle.Dispose();
    HOperatorSet.GenRectangle2(out ho_Rectangle, hv_Row, hv_Column, hv_Phi, hv_Length1, 
        hv_Length2);

    hv_CaliperNum = 100;

    hv_NewL1 = hv_Length1.Clone();
    hv_NewL2 = hv_Length2/(hv_CaliperNum-1);

    HOperatorSet.TupleSin(hv_Phi, out hv_Sin);
    HOperatorSet.TupleCos(hv_Phi, out hv_Cos);

    hv_BaseRow = hv_Row+(hv_Length2*hv_Cos);
    hv_BaseCol = hv_Column+(hv_Length2*hv_Sin);

    hv_newRow = hv_BaseRow.Clone();
    hv_newCol = hv_BaseCol.Clone();

    hv_RowFirstList = new HTuple();
    hv_ColFirstList = new HTuple();


    HTuple end_val37 = hv_CaliperNum;
    HTuple step_val37 = 1;
    for (hv_Index=1; hv_Index.Continue(end_val37, step_val37); hv_Index = hv_Index.TupleAdd(step_val37))
    {
      HOperatorSet.GenMeasureRectangle2(hv_newRow, hv_newCol, hv_Phi, hv_NewL1, hv_NewL2, 
          hv_Width, hv_Height, "nearest_neighbor", out hv_MeasureHandle);
      //positive  ?-»? negative  ?-»?

      HOperatorSet.MeasurePos(ho_Image11117455Cam0, hv_MeasureHandle, 1, 5, "negative", 
          "first", out hv_RowEdge, out hv_ColumnEdge, out hv_Amplitude, out hv_Distance);

      hv_newRow = hv_BaseRow-(((hv_NewL2*hv_Cos)*hv_Index)*2);
      hv_newCol = hv_BaseCol-(((hv_NewL2*hv_Sin)*hv_Index)*2);

      if ((int)(new HTuple((new HTuple(hv_RowEdge.TupleLength())).TupleGreater(0))) != 0)
      {
        hv_RowFirstList = hv_RowFirstList.TupleConcat(hv_RowEdge);
        hv_ColFirstList = hv_ColFirstList.TupleConcat(hv_ColumnEdge);
      }
      HOperatorSet.CloseMeasure(hv_MeasureHandle);
    }



    if ((int)(new HTuple((new HTuple(hv_RowFirstList.TupleLength())).TupleGreater(
        2))) != 0)
    {
      ho_Contour.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_RowFirstList, hv_ColFirstList);
      HOperatorSet.FitLineContourXld(ho_Contour, "gauss", -1, 0, 5, 2, out hv_RowBegin, 
          out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);

    }
    HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
    //dev_set_part (807, 961, 954, 2306)
    HOperatorSet.DispObj(ho_Image11117455Cam0, hv_ExpDefaultWinHandle);

    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
    //for Index1 := 0 to |RowFirstList|-1 by 1
      //disp_cross (WindowHandle, RowFirstList[Index1], ColFirstList[Index1], 6, Phi)
    //endfor


    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");

    ho_RegionLines.Dispose();
    HOperatorSet.GenRegionLine(out ho_RegionLines, hv_RowBegin, hv_ColBegin, hv_RowEnd, 
        hv_ColEnd);
    HOperatorSet.DispObj(ho_RegionLines, hv_ExpDefaultWinHandle);




    ho_Image11117455Cam0.Dispose();
    ho_Rectangle.Dispose();
    ho_Contour.Dispose();
    ho_RegionLines.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

